rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isFiniteNumber(val) {
      return val is number
        // && !math.isInfinite(val)
        && !math.isNaN(val);
    }

    function isValidUser(user) {
      return user.size() == 4
        && user.displayName is string
        && user.photoURL is string
        && user.slug is string
        && user.slackId is string;
    }

    match /users/{userId} {
      allow read;
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.diff(resource.data)
                         .affectedKeys()
                         .hasOnly(["displayName", "photoURL", "slug"])
                    && isValidUser(request.resource.data);
    }

    match /athlons/{document=**} {
      allow read;
    }

    function isValidGameScore(score, game) {
      return score.size() == 4
        && isFiniteNumber(score.rawScore)
        && score.rawScore >= 0
        && isFiniteNumber(score.tiebreakScore)
        && score.athlon is path
        && game.athlon == score.athlon
        && score.rawScore <= game.maxRawScore
        && score.user is string;
    }

    match /games/{gameId} {
      allow read;

      function gameData() {
        return get(/databases/$(database)/documents/games/$(gameId)).data
      }

      match /scores/{userId} {
        allow read;
        allow write: if request.auth != null
                     && request.auth.uid == userId
                     && request.resource.data.user == userId
                     && isValidGameScore(
                          request.resource.data,
                          get(/databases/(default)/documents/games/$(gameId)).data
                        );
      }

      function isValidReversingDiffSubmission(submission, game) {
        return submission.size() == 9
          && submission.athlon is path
          && game.athlon == submission.athlon
          && submission.userId is string
          && submission.status == 'pending'
          && submission.language is string
          && submission.code is string
          && submission.stdout == null
          && submission.stderr == null
          && submission.duration == null
          && submission.score == null;
      }

      match /submissions/{submissionId} {
        allow read: if (
          (request.auth != null && resource.data.userId == request.auth.uid) ||
          ('endAt' in gameData() && gameData().endAt >= request.time)
        );
        allow create: if (
          (request.auth != null && request.resource.data.userId == request.auth.uid) &&
          (
            gameData().rule == /databases/$(database)/documents/gameRules/reversing-diff &&
            isValidReversingDiffSubmission(request.resource.data, get(/databases/(default)/documents/games/$(gameId)).data)
          )
        );
      }
    }

    match /gameRules/{document=**} {
      allow read;
    }
  }
}