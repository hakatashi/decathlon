rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isFiniteNumber(val) {
      return val is number
        // && !math.isInfinite(val)
        && !math.isNaN(val);
    }

    function isValidUser(user) {
      return user.size() == 4
        && user.displayName is string
        && user.photoURL is string
        && user.slug is string
        && user.slackId is string;
    }

    match /users/{userId} {
      allow read;
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.diff(resource.data)
                         .affectedKeys()
                         .hasOnly(["displayName", "photoURL", "slug"])
                    && isValidUser(request.resource.data);
    }

    match /{path=**}/rankings/{userId} {
      allow read;
    }

    match /athlons/{document=**} {
      allow read;

      match /rankings/{userId} {
        allow read;
      }
    }

    match /games/{gameId} {
      allow read;
      allow write: if request.auth.uid in resource.data.admins
                   && request.resource.data.diff(resource.data)
                        .affectedKeys().hasOnly(["description"])
                   && request.resource.data.description is string;

      function gameData() {
        return get(/databases/$(database)/documents/games/$(gameId)).data
      }

      function isValidGameScore(score) {
        return score.size() == 4
          && isFiniteNumber(score.rawScore)
          && score.rawScore >= 0
          && isFiniteNumber(score.tiebreakScore)
          && score.athlon is path
          && gameData().athlon == score.athlon
          && score.rawScore <= gameData().maxRawScore
          && score.user is string;
      }

      function isGameEnded() {
        return 'endAt' in gameData() && gameData().endAt != null && gameData().endAt <= request.time;
      }

      match /scores/{userId} {
        allow read;
        allow write: if request.auth != null
                     && (
                       request.auth.uid == userId
                       || request.auth.uid in gameData().admins
                     )
                     && request.resource.data.user == userId
                     && isValidGameScore(request.resource.data);
      }

      function isValidReversingDiffSubmission(submission, game) {
        return submission.size() == 11
          && submission.athlon is path
          && game.athlon == submission.athlon
          && submission.userId is string
          && submission.status == 'pending'
          && submission.language is string
          && submission.code is string
          && submission.code.size() > 0
          && submission.stdout == null
          && submission.stderr == null
          && submission.duration == null
          && submission.score == null
          && submission.createdAt == request.time
          && submission.executedAt == null;
      }

      function isValidCodegolfSubmission(submission, game) {
        return submission.keys().hasOnly([
            'athlon', 'userId', 'status', 'language', 'code', 'size',
            'testcases', 'createdAt', 'executedAt'])
          && submission.athlon is path
          && game.athlon == submission.athlon
          && submission.userId is string
          && submission.status == 'pending'
          && submission.language is string
          && submission.code is string
          && submission.code.size() > 0
          && submission.size == submission.code.size()
          && submission.testcases is list
          && submission.testcases.size() == 0
          && submission.createdAt == request.time
          && submission.executedAt == null;
      }

      function isValidQuantumComputingSubmission(submission, game) {
        return submission.keys().hasOnly([
            'athlon', 'userId', 'status', 'code', 'size',
            'stdout', 'stderr', 'duration', 'createdAt', 'executedAt'])
          && submission.athlon is path
          && game.athlon == submission.athlon
          && submission.userId is string
          && submission.status == 'pending'
          && submission.code is string
          && submission.code.size() > 0
          && submission.size == submission.code.size()
          && submission.stdout == null
          && submission.stderr == null
          && submission.duration == null
          && submission.createdAt == request.time
          && submission.executedAt == null;
      }

      function isValidPromptEngineeringSubmission(submission, game) {
        return submission.keys().hasOnly([
            'athlon', 'userId', 'prompt', 'status', 'result',
            'parsedOutput', 'formatScore', 'rawVoteScore', 'voteScore',
            'score', 'votes', 'updatedAt'])
          && submission.athlon is path
          && game.athlon == submission.athlon
          && game.configuration.phase == 'submission'
          && submission.userId is string
          && submission.prompt is string
          && submission.status == 'pending'
          && submission.result == null
          && submission.parsedOutput == null
          && submission.formatScore == null
          && submission.rawVoteScore == null
          && submission.voteScore == null
          && submission.score == null
          && submission.votes is list
          && submission.votes.size() == 0
          && submission.updatedAt == request.time;
      }

      match /submissions/{submissionId} {
        allow read: if (
          (request.auth != null && resource.data.userId == request.auth.uid) ||
          isGameEnded()
        );
        allow create: if (
          (request.auth != null && request.resource.data.userId == request.auth.uid) &&
          !isGameEnded() &&
          (
            (
              gameData().rule == /databases/$(database)/documents/gameRules/reversing-diff &&
              isValidReversingDiffSubmission(request.resource.data, gameData())
            ) ||
            (
              gameData().rule == /databases/$(database)/documents/gameRules/codegolf &&
              isValidCodegolfSubmission(request.resource.data, gameData())
            ) ||
            (
              gameData().rule == /databases/$(database)/documents/gameRules/quantum-computing &&
              isValidQuantumComputingSubmission(request.resource.data, gameData())
            ) ||
            (
              gameData().rule == /databases/$(database)/documents/gameRules/prompt-engineering &&
              isValidPromptEngineeringSubmission(request.resource.data, gameData())
            )
          )
        );
        allow update: if (
          (request.auth != null && request.resource.data.userId == request.auth.uid) &&
          (!('endAt' in gameData()) || gameData().endAt == null || gameData().endAt >= request.time) &&
          (
            (
              gameData().rule == /databases/$(database)/documents/gameRules/prompt-engineering &&
              isValidPromptEngineeringSubmission(request.resource.data, gameData())
            )
          )
        );
      }

      match /ranking/{userId} {
        allow read;
      }

      match /results/{resultId} {
        allow read: if request.auth != null;
      }

      match /votes/{resultId} {
        allow read: if request.auth != null;
      }

      match /writeups/{userId} {
        allow read: if isGameEnded();
        allow create: if request.auth != null
                      && request.auth.uid == userId
                      && isGameEnded()
                      && request.resource.data.keys()
                         .hasOnly(['content', 'title', 'createdAt', 'updatedAt'])
                      && request.resource.data.content is string
                      && request.resource.data.content.size() > 0
                      && request.resource.data.title is string
                      && request.resource.data.title.size() > 0
                      && request.resource.data.createdAt == request.time
                      && request.resource.data.updatedAt == request.time;
        allow update: if request.auth != null
                      && request.auth.uid == userId
                      && isGameEnded()
                      && request.resource.data.diff(resource.data)
                         .affectedKeys()
                         .hasOnly(['content', 'title', 'updatedAt'])
                      && request.resource.data.content is string
                      && request.resource.data.content.size() > 0
                      && request.resource.data.title is string
                      && request.resource.data.title.size() > 0
                      && request.resource.data.updatedAt == request.time;
        allow delete: if request.auth != null
                      && request.auth.uid == userId
                      && isGameEnded();
      }
    }

    match /gameRules/{document=**} {
      allow read;
    }
  }
}