rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    function isFiniteFloat(val) {
      return val is float
        && !math.isInfinite(val)
        && !math.isNaN(val);
    }

    function isValidUser(user) {
      return user.size() == 4
        && user.displayName is string
        && user.photoURL is string
        && user.slug is string
        && user.slackId is string;
    }

    match /users/{userId} {
      allow read;
      allow update: if request.auth != null
                    && request.auth.uid == userId
                    && request.resource.data.diff(resource.data)
                         .affectedKeys()
                         .hasOnly(["displayName", "photoURL", "slug"])
                    && isValidUser(request.resource.data);
    }

    match /athlons/{document=**} {
      allow read;
    }

    function isValidGameScore(score, game) {
      return score.size() == 3
        && isFiniteFloat(score.rawScore)
        && score.rawScore >= 0
        && isFiniteFloat(score.tiebreakScore)
        && score.athlon is path
        && game.athlon == score.athlon
        && score.rawScore <= get(game.athlon).data.maxRawScore;
    }

    match /games/{gameId} {
      allow read;

      match /scores/{userId} {
        allow read;
        allow write: if request.auth != null
                     && request.auth.uid == userId
                     && isValidGameScore(
                          request.resource.data,
                          get(/databases/(default)/documents/games/$(gameId)).data
                        );
      }
    }

    match /gameRules/{document=**} {
      allow read;
    }
  }
}